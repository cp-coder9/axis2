rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Users collection - users can read/write their own data, admins can read all
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
      allow read: if request.auth != null && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'ADMIN';
    }
    
    // Projects collection - role-based access
    match /projects/{projectId} {
      allow read: if request.auth != null && (
        // Admin can read all projects
        (exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
         get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'ADMIN') ||
        // Client can read their own projects
        (exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
         get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'CLIENT' &&
         resource.data.clientId == request.auth.uid) ||
        // Freelancer can read assigned projects
        (exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
         get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'FREELANCER' &&
         request.auth.uid in resource.data.assignedTeamIds)
      );
      
      allow write: if request.auth != null && (
        // Admin can write all projects
        (exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
         get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'ADMIN') ||
        // Client can write their own projects
        (exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
         get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'CLIENT' &&
         resource.data.clientId == request.auth.uid)
      );
    }
    
    // Jobs collection - hierarchical access under projects
    match /jobs/{jobId} {
      allow read: if request.auth != null && (
        // Admin can read all jobs
        (exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
         get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'ADMIN') ||
        // Users can read jobs in projects they're involved in
        (exists(/databases/$(database)/documents/projects/$(resource.data.projectId)) &&
         (
           // Client can read jobs in their projects
           (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'CLIENT' &&
            get(/databases/$(database)/documents/projects/$(resource.data.projectId)).data.clientId == request.auth.uid) ||
           // Freelancer can read jobs in assigned projects
           (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'FREELANCER' &&
            request.auth.uid in get(/databases/$(database)/documents/projects/$(resource.data.projectId)).data.assignedTeamIds)
         ))
      );
      
      allow write: if request.auth != null && (
        // Admin can write all jobs
        (exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
         get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'ADMIN') ||
        // Users can write jobs in projects they're involved in (for updates)
        (exists(/databases/$(database)/documents/projects/$(resource.data.projectId)) &&
         (
           // Client can write jobs in their projects
           (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'CLIENT' &&
            get(/databases/$(database)/documents/projects/$(resource.data.projectId)).data.clientId == request.auth.uid) ||
           // Freelancer can update jobs they're assigned to
           (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'FREELANCER' &&
            request.auth.uid in get(/databases/$(database)/documents/projects/$(resource.data.projectId)).data.assignedTeamIds &&
            request.auth.uid in resource.data.assignedArchitectIds)
         ))
      );
    }
    
    // Tasks collection - hierarchical access under jobs
    match /tasks/{taskId} {
      allow read: if request.auth != null && (
        // Admin can read all tasks
        (exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
         get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'ADMIN') ||
        // Users can read tasks in jobs they're involved in
        (exists(/databases/$(database)/documents/jobs/$(resource.data.jobId)) &&
         exists(/databases/$(database)/documents/projects/$(get(/databases/$(database)/documents/jobs/$(resource.data.jobId)).data.projectId)) &&
         (
           // Client can read tasks in their projects
           (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'CLIENT' &&
            get(/databases/$(database)/documents/projects/$(get(/databases/$(database)/documents/jobs/$(resource.data.jobId)).data.projectId)).data.clientId == request.auth.uid) ||
           // Freelancer can read tasks in assigned projects
           (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'FREELANCER' &&
            request.auth.uid in get(/databases/$(database)/documents/projects/$(get(/databases/$(database)/documents/jobs/$(resource.data.jobId)).data.projectId)).data.assignedTeamIds)
         ))
      );
      
      allow write: if request.auth != null && (
        // Admin can write all tasks
        (exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
         get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'ADMIN') ||
        // Task assignee can update their assigned tasks
        (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'FREELANCER' &&
         resource.data.assignedToId == request.auth.uid) ||
        // Users can write tasks in projects they're involved in
        (exists(/databases/$(database)/documents/jobs/$(resource.data.jobId)) &&
         exists(/databases/$(database)/documents/projects/$(get(/databases/$(database)/documents/jobs/$(resource.data.jobId)).data.projectId)) &&
         (
           // Client can write tasks in their projects
           (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'CLIENT' &&
            get(/databases/$(database)/documents/projects/$(get(/databases/$(database)/documents/jobs/$(resource.data.jobId)).data.projectId)).data.clientId == request.auth.uid)
         ))
      );
    }
    
    // Time logs collection - users can read/write their own logs, admins can read all
    match /timeLogs/{logId} {
      allow read: if request.auth != null && (
        // Admin can read all logs
        (exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
         get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'ADMIN') ||
        // User can read their own logs
        resource.data.loggedById == request.auth.uid ||
        // Client can read logs for their projects
        (exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
         get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'CLIENT' &&
         exists(/databases/$(database)/documents/projects/$(resource.data.projectId)) &&
         get(/databases/$(database)/documents/projects/$(resource.data.projectId)).data.clientId == request.auth.uid) ||
        // Freelancer can read logs for tasks they're assigned to
        (exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
         get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'FREELANCER' &&
         exists(/databases/$(database)/documents/tasks/$(resource.data.taskId)) &&
         get(/databases/$(database)/documents/tasks/$(resource.data.taskId)).data.assignedToId == request.auth.uid)
      );
      
      allow write: if request.auth != null && (
        // Admin can write all logs
        (exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
         get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'ADMIN') ||
        // User can write their own logs
        request.resource.data.loggedById == request.auth.uid
      );
    }
    
    // Messages collection - project-based access
    match /messages/{messageId} {
      allow read, write: if request.auth != null && (
        // Admin can access all messages
        (exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
         get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'ADMIN') ||
        // Users can access messages for projects they're involved in
        (exists(/databases/$(database)/documents/projects/$(resource.data.projectId)) &&
         (get(/databases/$(database)/documents/projects/$(resource.data.projectId)).data.clientId == request.auth.uid ||
          request.auth.uid in get(/databases/$(database)/documents/projects/$(resource.data.projectId)).data.assignedTeamIds))
      );
    }
    
    // Files collection - project-based access with permission levels
    match /files/{fileId} {
      allow read: if request.auth != null && (
        // Admin can read all files
        (exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
         get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'ADMIN') ||
        // Check file permissions based on user role and project access
        (exists(/databases/$(database)/documents/projects/$(resource.data.projectId)) &&
         (
           // Client can read CLIENT_VISIBLE files in their projects
           (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'CLIENT' &&
            get(/databases/$(database)/documents/projects/$(resource.data.projectId)).data.clientId == request.auth.uid &&
            resource.data.permissions.level in ['CLIENT_VISIBLE', 'PROJECT_TEAM']) ||
           // Freelancer can read PROJECT_TEAM files in assigned projects
           (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'FREELANCER' &&
            request.auth.uid in get(/databases/$(database)/documents/projects/$(resource.data.projectId)).data.assignedTeamIds &&
            resource.data.permissions.level == 'PROJECT_TEAM')
         ))
      );
      
      allow write: if request.auth != null && (
        // Admin can write all files
        (exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
         get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'ADMIN') ||
        // Users can upload files to projects they're involved in
        (exists(/databases/$(database)/documents/projects/$(request.resource.data.projectId)) &&
         (get(/databases/$(database)/documents/projects/$(request.resource.data.projectId)).data.clientId == request.auth.uid ||
          request.auth.uid in get(/databases/$(database)/documents/projects/$(request.resource.data.projectId)).data.assignedTeamIds))
      );
    }
    
    // Notifications collection - users can read/write their own notifications, admins can read all
    match /notifications/{notificationId} {
      allow read, write: if request.auth != null && (
        // Users can access their own notifications
        resource.data.userId == request.auth.uid ||
        // Admins can access all notifications
        (exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
         get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'ADMIN')
      );
    }

    // Notification preferences - users can read/write their own preferences
    match /notificationPreferences/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }

    // FCM tokens - users can manage their own device tokens
    match /fcmTokens/{tokenId} {
      allow read, write: if request.auth != null && resource.data.userId == request.auth.uid;
    }

    // Notification queue - server-side only (for batching)
    match /notificationQueue/{queueId} {
      allow read, write: if false; // Server-side only
    }
    
    // Audit logs - admin only
    match /auditLogs/{logId} {
      allow read, write: if request.auth != null && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'ADMIN';
    }
    
    // Time Management Module Collections
    
    // Time allocations - admin only (create/read/update), freelancers can read their own
    match /timeAllocations/{allocationId} {
      allow read: if request.auth != null && (
        // Admin can read all allocations
        (exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
         get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'ADMIN') ||
        // Freelancer can read their own allocations
        (exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
         get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'FREELANCER' &&
         resource.data.freelancerId == request.auth.uid)
      );
      
      allow write: if request.auth != null && 
        // Only admins can create/update/delete allocations
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'ADMIN';
    }
    
    // Time slots - role-based access
    match /timeSlots/{slotId} {
      allow read: if request.auth != null && (
        // Admin can read all slots
        (exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
         get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'ADMIN') ||
        // Freelancer can read slots allocated to them
        (exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
         get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'FREELANCER' &&
         resource.data.freelancerId == request.auth.uid) ||
        // Client can read slots for their projects
        (exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
         get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'CLIENT' &&
         exists(/databases/$(database)/documents/projects/$(resource.data.projectId)) &&
         get(/databases/$(database)/documents/projects/$(resource.data.projectId)).data.clientId == request.auth.uid)
      );
      
      allow write: if request.auth != null && 
        // Only admins can create/update slots (slots are created from allocations)
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'ADMIN';
    }
    
    // Time purchases - client can read/write their own, admin can read all
    match /timePurchases/{purchaseId} {
      allow read: if request.auth != null && (
        // Admin can read all purchases
        (exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
         get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'ADMIN') ||
        // Client can read their own purchases
        (exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
         get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'CLIENT' &&
         resource.data.clientId == request.auth.uid)
      );
      
      allow write: if request.auth != null && (
        // Admin can write all purchases
        (exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
         get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'ADMIN') ||
        // Client can create purchases for themselves
        (exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
         get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'CLIENT' &&
         request.resource.data.clientId == request.auth.uid)
      );
    }
  }
}